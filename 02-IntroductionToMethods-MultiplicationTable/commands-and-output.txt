jshell> int table = 7;
table ==> 7

jshell> for( i =1; i<=10; i++) {
   ...> System.out.printf("%d * %d = %d", table, i, table*i).println();
   ...> }
7 * 1 = 7
7 * 2 = 14
7 * 3 = 21
7 * 4 = 28
7 * 5 = 35
7 * 6 = 42
7 * 7 = 49
7 * 8 = 56
7 * 9 = 63
7 * 10 = 70

jshell> table = 8
table ==> 8

jshell> for( i =1; i<=10; i++) {
   ...> System.out.printf("%d * %d = %d", table, i, table*i).println();
   ...> }
8 * 1 = 8
8 * 2 = 16
8 * 3 = 24
8 * 4 = 32
8 * 5 = 40
8 * 6 = 48
8 * 7 = 56
8 * 8 = 64
8 * 9 = 72
8 * 10 = 80

jshell> printMultiplicationTable(8)
|  Error:
|  cannot find symbol
|    symbol:   method printMultiplicationTable(int)
|  printMultiplicationTable(8)
|  ^----------------------^

jshell> System.out.prinln("Hello World")
|  Error:
|  cannot find symbol
|    symbol:   method prinln(java.lang.String)
|  System.out.prinln("Hello World")
|  ^---------------^


jshell> System.out.println("Hello World")
Hello World

jshell> System.out.prinln("Hello World");
|  Error:
|  cannot find symbol
|    symbol:   method prinln(java.lang.String)
|  System.out.prinln("Hello World");
|  ^---------------^

jshell> System.out.println("Hello World")
Hello World

jshell> System.out.println("Hello World")
Hello World

jshell> System.out.println("Hello World"); System.out.println("Hello World");
Hello World
Hello World

jshell> clear()

 
jshell> System.out.println("Hello World"); System.out.println("Hello World");
Hello World
Hello World

jshell> void sayHelloWorldTwice(){
   ...>    System.out.println("Hello World");
   ...>    System.out.println("Hello World");
   ...> }
|  created method sayHelloWorldTwice()

jshell> sayHelloWorldTwice()
Hello World
Hello World

jshell> void sayHelloWorldThrice(){
   ...>  System.out.println("Hello World");
   ...>  System.out.println("Hello World");
   ...>  System.out.println("Hello World");
   ...> }
|  created method sayHelloWorldThrice()

jshell> sayHelloWorldThrice()
Hello World
Hello World
Hello World

jshell> void printLearningExperience() {
   ...> System.out.println("I've created my first variable");
   ...> System.out.println("I've created my first method");
   ...> System.out.println("I've created my first loop");
   ...> System.out.println("I'm excited to learn Java");
   ...> }
|  created method printLearningExperience()

jshell> printLearningExperience()
I've created my first variable
I've created my first method
I've created my first loop
I'm excited to learn Java

jshell> printLearningExperience
|  Error:
|  cannot find symbol
|    symbol:   variable printLearningExperience
|  printLearningExperience
|  ^---------------------^


jshell> printLearningExperience()
I've created my first variable
I've created my first method
I've created my first loop
I'm excited to learn Java

jshell> void 2things() {
   ...> }
|  Error:
|  illegal start of expression
|  void 2things() {
|  ^--^
|  Error:
|  ';' expected
|  void 2things() {
|      ^
|  Error:
|  ';' expected
|  void 2things() {
|                ^
|  Error:
|  cannot find symbol
|    symbol:   method things()
|  void 2things() {
|        ^----^

jshell> void void(){
   ...> }
|  Error:
|  illegal start of expression
|  void void(){
|  ^--^
|  Error:
|  ';' expected
|  void void(){
|      ^
|  Error:
|  illegal start of expression
|  void void(){
|       ^--^
|  Error:
|  ';' expected
|  void void(){
|           ^

jshell> void for(){
|  Error:
|  illegal start of expression
|  void for(){
|  ^--^
|  Error:
|  ';' expected
|  void for(){
|      ^
|  Error:
|  illegal start of expression
|  void for(){
|           ^
|  Error:
|  reached end of file while parsing
|  void for(){
|             ^
|  Error:
|  missing return statement
|  void for(){
|  ^---------^

jshell> void if(){
|  Error:
|  illegal start of expression
|  void if(){
|  ^--^
|  Error:
|  ';' expected
|  void if(){
|      ^
|  Error:
|  illegal start of expression
|  void if(){
|          ^
|  Error:
|  reached end of file while parsing
|  void if(){
|            ^
|  Error:
|  missing return statement
|  void if(){
|  ^--------^

jshell> void NameOfMethod(){
   ...> }
|  created method NameOfMethod()

jshell> void nameOfMethod(){
   ...> }
|  created method nameOfMethod()

jshell> clear()

 
jshell> /methods
|    void clear()
|    void sayHelloWorld(int)
|    void sayHelloWorld()
|    void printMultipleTimes(int)
|    void printMultipleTimes(int,String)
|    void test()
|    int ireturn()
|    void sayHelloWorldTwice()
|    void sayHelloWorldThrice()
|    void printLearningExperience()
|    void NameOfMethod()
|    void nameOfMethod()


jshell> /remove
|  No such command or snippet id: /remove
|  Type /help for help.

jshell> /help
|  Type a Java language expression, statement, or declaration.
|  Or type one of the following commands:
|  /list [<name or id>|-all|-start]
|  	list the source you have typed
|  /edit <name or id>
|  	edit a source entry referenced by name or id
|  /drop <name or id>
|  	delete a source entry referenced by name or id
|  /save [-all|-history|-start] <file>
|  	Save snippet source to a file.
|  /open <file>
|  	open a file as source input
|  /vars [<name or id>|-all|-start]
|  	list the declared variables and their values
|  /methods [<name or id>|-all|-start]
|  	list the declared methods and their signatures
|  /types [<name or id>|-all|-start]
|  	list the declared types
|  /imports 
|  	list the imported items
|  /exit 
|  	exit jshell
|  /env [-class-path <path>] [-module-path <path>] [-add-modules <modules>] ...
|  	view or change the evaluation context
|  /reset [-class-path <path>] [-module-path <path>] [-add-modules <modules>]...
|  	reset jshell
|  /reload [-restore] [-quiet] [-class-path <path>] [-module-path <path>]...
|  	reset and replay relevant history -- current or previous (-restore)
|  /history 
|  	history of what you have typed
|  /help [<command>|<subject>]
|  	get information about jshell
|  /set editor|start|feedback|mode|prompt|truncation|format ...
|  	set jshell configuration information
|  /? [<command>|<subject>]
|  	get information about jshell
|  /! 
|  	re-run last snippet
|  /<id> 
|  	re-run snippet by id
|  /-<n> 
|  	re-run n-th previous snippet
|  
|  For more information type '/help' followed by the name of a
|  command or a subject.
|  For example '/help /list' or '/help intro'.
|  
|  Subjects:
|  
|  intro
|  	an introduction to the jshell tool
|  shortcuts
|  	a description of keystrokes for snippet and command completion,
|  	information access, and automatic code generation
|  context
|  	the evaluation context options for /env /reload and /reset

jshell> /
|  Command: '/' is ambiguous: /list, /edit, /drop, /save, /open, /vars, /methods, /types, /imports, /exit, /env, /reset, /reload, /history, /debug, /help, /set, /?, /!
|  Type /help for help.